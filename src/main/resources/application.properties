spring.application.name=EventManagementBackend
#Postgres Database setup
spring.datasource.url=jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
spring.datasource.username=${POSTGRES_USERNAME}
spring.datasource.password=${POSTGRES_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver
# Show SQL and format for debugging
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.show-sql=true
# Second-level and query cache disabled (optional, based on use case)
spring.jpa.properties.hibernate.cache.use_query_cache=false
#spring.jpa.properties.hibernate.cache.use_second_level_cache=false
# Hibernate Statement Cache
#spring.jpa.properties.hibernate.statement_cache.size=512
#spring.jpa.properties.hibernate.prepare_statements=true
# Enable Lazy Loading outside a Transaction (if needed)
#spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true
# Batch Settings for Improved Query Performance
spring.jpa.properties.hibernate.jdbc.batch_size=30
spring.jpa.properties.hibernate.jdbc.fetch_size=50
# Query Timeout to avoid long-running queries blocking the pool
#spring.jpa.properties.hibernate.jdbc.timeout=30
# Hibernate caches prepared statements
#spring.jpa.properties.hibernate.c3p0.min_size=5
#spring.jpa.properties.hibernate.c3p0.max_size=20
# Settings HikariCP
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.pool-name=HikariCP
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=30000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.connection-timeout=20000
# Connection Validation
#spring.datasource.hikari.connection-test-query=SELECT 1
# Prepared Statement Caching
spring.datasource.hikari.data-source-properties.cachePrepStmts=true
spring.datasource.hikari.data-source-properties.prepStmtCacheSize=250
spring.datasource.hikari.data-source-properties.prepStmtCacheSqlLimit=2048
spring.datasource.hikari.data-source-properties.useServerPrepStmts=true
# Leak Detection (Optional - Useful for debugging)
#spring.datasource.hikari.leak-detection-threshold=2000
# Ensure proper transaction management
#spring.jpa.open-in-view=false
#
#
# Auth public and private RSA key
rsa.private-key=classpath:certs/private-key.pem
rsa.public-key=classpath:certs/public-key.pem
# JWT secret key
jwt.secret=BV3w2mEYhTfrfWLGiWk7MhXfp0qgwjou
#google Oauth2 credentials
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
#logging.level.org.springframework.data = DEBUG
#logging.level.com.zaxxer.hikari=DEBUG
#logging.level.org.springframework.jdbc.datasource.DataSourceTransactionManager=DEBUG
#logging.level.org.springframework.security=TRACE
#logging.level.org.springframework=DEBUG
#logging.level.org.springframework.transaction=TRACE
#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

